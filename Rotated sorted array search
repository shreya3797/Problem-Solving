int Solution::search(const vector<int> &A, int B) {
    int n = A.size();
    if (n == 1) {
        if (A[0] == B) {
            return 0;
        }
    }
    if (n == 2) {
        if (A[0] == B) return 0;
        if (A[1] == B) return 1;
    }
    int l = 0; int r = n-1;
    int pointOfRotation = -1;
    if (A[l] > A[r]) {
        while (l <= r) {
            int mid = (l+r)/2;
            if (A[mid] < A[mid-1] && A[mid] < A[mid+1]) {
                pointOfRotation = mid;
                break;
            } else if (A[mid] <= A[r]) {
                r = mid - 1;                
            } else if (A[mid] >= A[l]) {
                l = mid + 1;
            }        
        } 
    }
    l = 0;r = n- 1;
    if (A[l] == B) return l;
    if (A[r] == B) return r;
    if (pointOfRotation != -1) {
        if (A[l] < B)  {            
            r = pointOfRotation - 1;
        }
        else if (A[r] > B) {
            l = pointOfRotation;            
        }
    }
    while (l <= r) {
        int mid = (l+r)/2;
        if (B == A[mid]) {
            return mid;
        } else if (B < A[mid]) {
            r = mid - 1;
        } else {
            l = mid+1;
        }
    }
    return -1;  
}
